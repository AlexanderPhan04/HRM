// PerformanceModule.js - Module ƒë√°nh gi√° hi·ªáu su·∫•t
export class PerformanceModule {
  constructor(employeeDb, departmentModule, positionModule) {
    this.employeeDb = employeeDb;
    this.departmentModule = departmentModule;
    this.positionModule = positionModule;
    this.storageKey = "hrm_performance";
    this.init();
  }

  // Kh·ªüi t·∫°o
  init() {
    if (!localStorage.getItem(this.storageKey)) {
      localStorage.setItem(this.storageKey, JSON.stringify([]));
    }
  }

  // L·∫•y t·∫•t c·∫£ ƒë√°nh gi√°
  getAllReviews() {
    const data = localStorage.getItem(this.storageKey);
    return data ? JSON.parse(data) : [];
  }

  // L∆∞u danh s√°ch ƒë√°nh gi√°
  async saveReviews(reviews) {
    await this.delay(300);
    localStorage.setItem(this.storageKey, JSON.stringify(reviews));
  }

  // Th√™m ƒë√°nh gi√°
  async addReview(employeeId, rating, feedback = "", reviewDate = null) {
    if (rating < 1 || rating > 5) {
      throw new Error("ƒêi·ªÉm ƒë√°nh gi√° ph·∫£i t·ª´ 1 ƒë·∫øn 5!");
    }

    const reviews = this.getAllReviews();
    const newReview = {
      id: this.generateReviewId(),
      employeeId,
      rating,
      feedback,
      date: reviewDate || new Date().toISOString().split("T")[0],
      createdAt: new Date().toISOString(),
    };

    reviews.push(newReview);
    await this.saveReviews(reviews);
    return newReview;
  }

  // L·∫•y ƒëi·ªÉm trung b√¨nh c·ªßa nh√¢n vi√™n (s·ª≠ d·ª•ng filter v√† reduce - higher-order functions)
  getAverageRating(employeeId) {
    // L·∫•y t·∫•t c·∫£ ƒë√°nh gi√° t·ª´ localStorage
    const reviews = this.getAllReviews();

    // Filter: L·ªçc ra ch·ªâ nh·ªØng ƒë√°nh gi√° c·ªßa nh√¢n vi√™n n√†y
    const empReviews = reviews.filter((r) => r.employeeId === employeeId);

    // N·∫øu ch∆∞a c√≥ ƒë√°nh gi√° n√†o, tr·∫£ v·ªÅ 0
    if (empReviews.length === 0) {
      return 0;
    }

    // Reduce: C·ªông d·ªìn t·∫•t c·∫£ rating ƒë·ªÉ t√≠nh t·ªïng ƒëi·ªÉm
    // sum: accumulator (t·ªïng t√≠ch l≈©y), review: element hi·ªán t·∫°i
    // 0: gi√° tr·ªã kh·ªüi t·∫°o c·ªßa sum
    const total = empReviews.reduce((sum, review) => sum + review.rating, 0);

    // T√≠nh trung b√¨nh: T·ªïng ƒëi·ªÉm / S·ªë l∆∞·ª£ng ƒë√°nh gi√°
    return total / empReviews.length;
  }

  // L·∫•y t·∫•t c·∫£ ƒë√°nh gi√° c·ªßa nh√¢n vi√™n
  getEmployeeReviews(employeeId) {
    const reviews = this.getAllReviews();
    return reviews.filter((r) => r.employeeId === employeeId);
  }

  // T·∫°o ID ƒë√°nh gi√° m·ªõi
  generateReviewId() {
    return "PERF" + Date.now();
  }

  // L·∫•y top performers (s·ª≠ d·ª•ng map, filter, sort - higher-order functions)
  getTopPerformers(limit = 10) {
    // L·∫•y to√†n b·ªô nh√¢n vi√™n t·ª´ database
    const employees = this.employeeDb.getAllEmployees();

    // Map: Transform m·ªói employee, th√™m th√¥ng tin rating
    const empWithRatings = employees.map((emp) => ({
      ...emp, // Spread: copy t·∫•t c·∫£ properties c·ªßa employee
      avgRating: this.getAverageRating(emp.id), // Th√™m ƒëi·ªÉm trung b√¨nh
      reviewCount: this.getEmployeeReviews(emp.id).length, // Th√™m s·ªë l∆∞·ª£ng ƒë√°nh gi√°
    }));

    // Filter: Ch·ªâ l·∫•y nh·ªØng nh√¢n vi√™n c√≥ √≠t nh·∫•t 1 ƒë√°nh gi√°
    const withReviews = empWithRatings.filter((e) => e.reviewCount > 0);

    // Sort: S·∫Øp x·∫øp theo ƒëi·ªÉm trung b√¨nh gi·∫£m d·∫ßn (descending)
    // Slice: C·∫Øt m·∫£ng ƒë·ªÉ ch·ªâ l·∫•y top N nh√¢n vi√™n
    return withReviews
      .sort((a, b) => b.avgRating - a.avgRating) // b - a: s·∫Øp x·∫øp gi·∫£m d·∫ßn
      .slice(0, limit); // L·∫•y t·ª´ index 0 ƒë·∫øn limit
  }

  // Render giao di·ªán
  render() {
    const employees = this.employeeDb.getAllEmployees();
    const topPerformers = this.getTopPerformers(5);

    return `
            <div class="module-header">
                <h2>ƒê√°nh Gi√° Hi·ªáu Su·∫•t</h2>
                <p>Qu·∫£n l√Ω ƒë√°nh gi√° v√† theo d√µi hi·ªáu su·∫•t nh√¢n vi√™n</p>
            </div>
            
            <!-- Top performers -->
            <div class="card">
                <h3>üèÜ Top 5 Nh√¢n Vi√™n Xu·∫•t S·∫Øc</h3>
                ${
                  topPerformers.length === 0
                    ? `
                    <div class="empty-state">
                        <p>Ch∆∞a c√≥ ƒë√°nh gi√° n√†o</p>
                    </div>
                `
                    : `
                    <table>
                        <thead>
                            <tr>
                                <th>Th·ª© h·∫°ng</th>
                                <th>M√£ NV</th>
                                <th>H·ªç t√™n</th>
                                <th>Ph√≤ng ban</th>
                                <th>ƒêi·ªÉm TB</th>
                                <th>S·ªë ƒë√°nh gi√°</th>
                            </tr>
                        </thead>
                        <tbody>
                            ${topPerformers
                              .map((emp, index) => {
                                const dept =
                                  this.departmentModule.getDepartmentById(
                                    emp.departmentId
                                  );
                                return `
                                    <tr>
                                        <td><strong>#${index + 1}</strong></td>
                                        <td>${emp.id}</td>
                                        <td>${emp.name}</td>
                                        <td>${dept ? dept.name : "N/A"}</td>
                                        <td>‚≠ê ${emp.avgRating.toFixed(
                                          2
                                        )}/5</td>
                                        <td>${emp.reviewCount}</td>
                                    </tr>
                                `;
                              })
                              .join("")}
                        </tbody>
                    </table>
                `
                }
            </div>
            
            <!-- Form th√™m ƒë√°nh gi√° -->
            <div class="form-container">
                <h3>Th√™m ƒê√°nh Gi√° M·ªõi</h3>
                <form id="add-review-form">
                    <div class="form-row">
                        <div class="form-group">
                            <label>Nh√¢n vi√™n *</label>
                            <select id="review-employee" required>
                                <option value="">-- Ch·ªçn nh√¢n vi√™n --</option>
                                ${employees
                                  .map((emp) => {
                                    const avg = this.getAverageRating(emp.id);
                                    const avgText =
                                      avg > 0 ? ` (TB: ${avg.toFixed(2)})` : "";
                                    return `<option value="${emp.id}">${emp.name}${avgText}</option>`;
                                  })
                                  .join("")}
                            </select>
                        </div>
                        <div class="form-group">
                            <label>ƒêi·ªÉm ƒë√°nh gi√° (1-5) *</label>
                            <select id="review-rating" required>
                                <option value="">-- Ch·ªçn ƒëi·ªÉm --</option>
                                <option value="5">‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê Xu·∫•t s·∫Øc (5)</option>
                                <option value="4">‚≠ê‚≠ê‚≠ê‚≠ê T·ªët (4)</option>
                                <option value="3">‚≠ê‚≠ê‚≠ê Trung b√¨nh (3)</option>
                                <option value="2">‚≠ê‚≠ê C·∫ßn c·∫£i thi·ªán (2)</option>
                                <option value="1">‚≠ê K√©m (1)</option>
                            </select>
                        </div>
                    </div>
                    
                    <div class="form-row">
                        <div class="form-group">
                            <label>Ng√†y ƒë√°nh gi√° *</label>
                            <input type="date" id="review-date" value="${
                              new Date().toISOString().split("T")[0]
                            }" required>
                        </div>
                    </div>
                    
                    <div class="form-group">
                        <label>Nh·∫≠n x√©t</label>
                        <textarea id="review-feedback" rows="4" placeholder="Nh·∫≠p nh·∫≠n x√©t chi ti·∫øt..."></textarea>
                    </div>
                    
                    <button type="submit" class="btn btn-primary">Th√™m ƒë√°nh gi√°</button>
                </form>
                <div id="review-message"></div>
            </div>
            
            <!-- Danh s√°ch t·∫•t c·∫£ nh√¢n vi√™n v·ªõi ƒëi·ªÉm -->
            <div class="card">
                <h3>B·∫£ng ƒê√°nh Gi√° Hi·ªáu Su·∫•t</h3>
                <button class="btn btn-secondary btn-small" onclick="window.performanceModule.showAllRatings()">
                    Xem chi ti·∫øt
                </button>
                <div id="all-ratings"></div>
            </div>
            
            <!-- Chi ti·∫øt ƒë√°nh gi√° nh√¢n vi√™n -->
            <div id="employee-reviews"></div>
        `;
  }

  // G·∫Øn event listeners
  attachEventListeners() {
    const reviewForm = document.getElementById("add-review-form");
    if (reviewForm) {
      reviewForm.addEventListener("submit", (e) => {
        e.preventDefault();
        this.handleAddReview();
      });
    }

    // Khi ch·ªçn nh√¢n vi√™n, hi·ªÉn th·ªã l·ªãch s·ª≠ ƒë√°nh gi√°
    const employeeSelect = document.getElementById("review-employee");
    if (employeeSelect) {
      employeeSelect.addEventListener("change", (e) => {
        if (e.target.value) {
          this.showEmployeeReviews(e.target.value);
        } else {
          document.getElementById("employee-reviews").innerHTML = "";
        }
      });
    }
  }

  // X·ª≠ l√Ω th√™m ƒë√°nh gi√°
  async handleAddReview() {
    const employeeId = document.getElementById("review-employee").value;
    const rating = parseInt(document.getElementById("review-rating").value);
    const date = document.getElementById("review-date").value;
    const feedback = document.getElementById("review-feedback").value.trim();

    if (!employeeId || !rating || !date) {
      alert("Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin!");
      return;
    }

    try {
      await this.addReview(employeeId, rating, feedback, date);
      const emp = this.employeeDb.getEmployeeById(employeeId);
      this.showMessage(
        `ƒê√£ th√™m ƒë√°nh gi√° cho ${emp.name} v·ªõi ${rating} sao`,
        "success"
      );

      // Clear form
      document.getElementById("add-review-form").reset();
      document.getElementById("review-date").value = new Date()
        .toISOString()
        .split("T")[0];

      // Refresh
      setTimeout(() => {
        const content = this.render();
        document.getElementById("content-area").innerHTML = content;
        this.attachEventListeners();
      }, 1500);
    } catch (error) {
      this.showMessage(error.message, "error");
    }
  }

  // Hi·ªÉn th·ªã t·∫•t c·∫£ ƒë√°nh gi√°
  showAllRatings() {
    const employees = this.employeeDb.getAllEmployees();

    const empWithRatings = employees.map((emp) => {
      const reviews = this.getEmployeeReviews(emp.id);
      const dept = this.departmentModule.getDepartmentById(emp.departmentId);
      const pos = this.positionModule.getPositionById(emp.positionId);

      return {
        ...emp,
        departmentName: dept ? dept.name : "N/A",
        positionTitle: pos ? pos.title : "N/A",
        avgRating: this.getAverageRating(emp.id),
        reviewCount: reviews.length,
      };
    });

    const container = document.getElementById("all-ratings");
    container.innerHTML = `
            <table>
                <thead>
                    <tr>
                        <th>M√£ NV</th>
                        <th>H·ªç t√™n</th>
                        <th>Ph√≤ng ban</th>
                        <th>V·ªã tr√≠</th>
                        <th>ƒêi·ªÉm TB</th>
                        <th>S·ªë ƒë√°nh gi√°</th>
                        <th>Thao t√°c</th>
                    </tr>
                </thead>
                <tbody>
                    ${empWithRatings
                      .map((emp) => {
                        const stars =
                          emp.avgRating > 0
                            ? "‚≠ê".repeat(Math.round(emp.avgRating))
                            : "--";
                        return `
                            <tr>
                                <td>${emp.id}</td>
                                <td>${emp.name}</td>
                                <td>${emp.departmentName}</td>
                                <td>${emp.positionTitle}</td>
                                <td>${
                                  emp.avgRating > 0
                                    ? emp.avgRating.toFixed(2)
                                    : "--"
                                } ${stars}</td>
                                <td>${emp.reviewCount}</td>
                                <td>
                                    <button class="btn btn-primary btn-small" onclick="window.performanceModule.showEmployeeReviews('${
                                      emp.id
                                    }')">
                                        Chi ti·∫øt
                                    </button>
                                </td>
                            </tr>
                        `;
                      })
                      .join("")}
                </tbody>
            </table>
        `;
  }

  // Hi·ªÉn th·ªã ƒë√°nh gi√° c·ªßa m·ªôt nh√¢n vi√™n
  showEmployeeReviews(employeeId) {
    const employee = this.employeeDb.getEmployeeById(employeeId);
    const reviews = this.getEmployeeReviews(employeeId);
    const avgRating = this.getAverageRating(employeeId);

    const container = document.getElementById("employee-reviews");
    container.innerHTML = `
            <div class="card">
                <h3>L·ªãch S·ª≠ ƒê√°nh Gi√°: ${employee.name}</h3>
                <p><strong>ƒêi·ªÉm trung b√¨nh:</strong> ${
                  avgRating > 0 ? avgRating.toFixed(2) : "--"
                }/5 ‚≠ê (${reviews.length} ƒë√°nh gi√°)</p>
                
                ${
                  reviews.length === 0
                    ? `
                    <div class="empty-state">
                        <p>Ch∆∞a c√≥ ƒë√°nh gi√° n√†o</p>
                    </div>
                `
                    : `
                    <table>
                        <thead>
                            <tr>
                                <th>Ng√†y</th>
                                <th>ƒêi·ªÉm</th>
                                <th>Nh·∫≠n x√©t</th>
                            </tr>
                        </thead>
                        <tbody>
                            ${reviews
                              .sort(
                                (a, b) => new Date(b.date) - new Date(a.date)
                              )
                              .map((review) => {
                                const stars = "‚≠ê".repeat(review.rating);
                                return `
                                    <tr>
                                        <td>${new Date(
                                          review.date
                                        ).toLocaleDateString("vi-VN")}</td>
                                        <td>${stars} (${review.rating}/5)</td>
                                        <td>${review.feedback || "--"}</td>
                                    </tr>
                                `;
                              })
                              .join("")}
                        </tbody>
                    </table>
                `
                }
            </div>
        `;

    // Scroll to view
    container.scrollIntoView({ behavior: "smooth" });
  }

  // Hi·ªÉn th·ªã th√¥ng b√°o
  showMessage(message, type) {
    const msgDiv = document.getElementById("review-message");
    msgDiv.innerHTML = `
            <div class="message message-${type}">
                ${message}
            </div>
        `;

    setTimeout(() => {
      msgDiv.innerHTML = "";
    }, 5000);
  }

  // H√†m delay
  delay(ms) {
    return new Promise((resolve) => setTimeout(resolve, ms));
  }
}
